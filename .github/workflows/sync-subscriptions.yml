name: Sync Subscriptions

on:
  schedule:
    - cron: '0 */6 * * *'  # 每6小时运行一次
  workflow_dispatch:        # 支持手动触发
  
jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write       # 显式授予写入权限
    # 添加超时限制，设置为5小时30分钟，留出一些余量
    timeout-minutes: 330
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0    # 获取完整历史记录
      
      # 先设置pnpm
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 7
          run_install: false
      
      # 然后设置Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'    # 启用Node模块缓存
      
      # 添加缓存恢复步骤
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      
      # 确保数据目录存在
      - name: Create data directory
        run: |
          mkdir -p data
          mkdir -p output
          mkdir -p data/cache
          mkdir -p data/ip_cache
          mkdir -p output/groups
          chmod -R 777 data
          chmod -R 777 output
      
      # 安装依赖
      - name: Install dependencies
        run: pnpm install
      
      # 构建项目
      - name: Build project
        run: pnpm build
      
      # 运行同步订阅脚本
      - name: Sync subscriptions
        env:
          ROOT_DIR: ${{ github.workspace }}
          DATA_DIR: data
          CONFIG_PATH: ${{ github.workspace }}/config/custom.yaml
          PROXY_FOR_SUBSCRIPTION: 'true'
          LOG_LEVEL: 'debug'
        run: |
          echo "工作目录: $(pwd)"
          echo "根目录: $ROOT_DIR"
          echo "数据目录: $DATA_DIR"
          echo "配置文件路径: $CONFIG_PATH"
          node dist/sync-subscriptions.js
      
      # 提交更改（即使获取节点失败也提交空文件）
      - name: Commit changes
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          
          # 添加所有更改
          git add data/ output/
          
          # 即使没有变化也继续执行（不会报错）
          git commit -m "更新订阅数据 $(date +'%Y-%m-%d %H:%M:%S')" || echo "没有变更需要提交"
          
          # 推送更改
          git push || echo "推送失败，可能是没有新变更"
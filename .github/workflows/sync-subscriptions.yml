name: Sync Subscriptions

on:
  schedule:
    - cron: '0 */6 * * *'  # 每6小时运行一次
  workflow_dispatch:        # 支持手动触发
  
jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write       # 显式授予写入权限
    # 添加超时限制，设置为5小时30分钟，留出一些余量
    timeout-minutes: 330
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0    # 获取完整历史记录
      
      # 先设置pnpm
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 7
          run_install: false
      
      # 然后设置Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'    # 启用Node模块缓存
      
      # 添加缓存恢复步骤
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      
      # 确保目录结构存在
      - name: Create directories
        run: |
          mkdir -p data
          mkdir -p output
          mkdir -p data/cache
          mkdir -p data/ip_cache
          mkdir -p data/test_results
          mkdir -p output/groups
          chmod -R 777 data
          chmod -R 777 output
      
      # 安装依赖
      - name: Install dependencies
        run: pnpm install
      
      # 构建项目
      - name: Build project
        run: pnpm build
      
      # 配置上传器
      - name: Configure uploaders
        run: |
          # 创建临时配置文件
          cat > config/uploader.json.tmp << EOL
          {
            "uploaders": [
              {
                "id": "local",
                "name": "本地存储",
                "type": "local",
                "enabled": true,
                "config": {
                  "outputDir": "./output"
                }
              }
            ],
            "defaultUploader": "local"
          }
          EOL
          
          # 如果配置了WebDAV
          if [[ -n "${{ secrets.WEBDAV_URL }}" && -n "${{ secrets.WEBDAV_USERNAME }}" && -n "${{ secrets.WEBDAV_PASSWORD }}" ]]; then
            echo "配置WebDAV上传..."
            # 使用jq添加WebDAV配置
            jq '.uploaders += [{
              "id": "webdav",
              "name": "WebDAV存储",
              "type": "webdav",
              "enabled": true,
              "config": {
                "url": "${{ secrets.WEBDAV_URL }}",
                "username": "${{ secrets.WEBDAV_USERNAME }}",
                "password": "${{ secrets.WEBDAV_PASSWORD }}",
                "remotePath": "${{ secrets.WEBDAV_PATH || 'sub-sync' }}"
              }
            }]' config/uploader.json.tmp > config/uploader.json.tmp2
            mv config/uploader.json.tmp2 config/uploader.json.tmp
          fi
          
          # 如果配置了Cloudflare R2
          if [[ -n "${{ secrets.R2_ACCOUNT_ID }}" && -n "${{ secrets.R2_ACCESS_KEY_ID }}" && -n "${{ secrets.R2_SECRET_ACCESS_KEY }}" && -n "${{ secrets.R2_BUCKET_NAME }}" ]]; then
            echo "配置Cloudflare R2上传..."
            # 使用jq添加R2配置
            jq '.uploaders += [{
              "id": "r2",
              "name": "Cloudflare R2存储",
              "type": "r2",
              "enabled": true,
              "config": {
                "accountId": "${{ secrets.R2_ACCOUNT_ID }}",
                "accessKeyId": "${{ secrets.R2_ACCESS_KEY_ID }}",
                "secretAccessKey": "${{ secrets.R2_SECRET_ACCESS_KEY }}",
                "bucketName": "${{ secrets.R2_BUCKET_NAME }}",
                "remotePath": "${{ secrets.R2_PATH || 'sub-sync' }}"
              }
            }]' config/uploader.json.tmp > config/uploader.json.tmp2
            mv config/uploader.json.tmp2 config/uploader.json.tmp
          fi
          
          # 移动最终配置文件
          mv config/uploader.json.tmp config/uploader.json
          echo "上传器配置完成"
      
      # 运行同步订阅脚本
      - name: Sync subscriptions
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}
          ROOT_DIR: ${{ github.workspace }}
          DATA_DIR: data
          CONFIG_PATH: ${{ github.workspace }}/config/custom.yaml
          PROXY_FOR_SUBSCRIPTION: 'true'
          LOG_LEVEL: 'info'
          MAX_EXECUTION_TIME: '18000000'  # 5小时 (毫秒)
          BARK_URL: ${{ secrets.BARK_URL }}
          BARK_TITLE: ${{ secrets.BARK_TITLE || '订阅同步通知' }}
          # GitHub 信息用于输出URL
          GITHUB_USER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
          # 上传配置
          USE_GITHUB: 'true'
          USE_UPLOADER: ${{ (secrets.WEBDAV_URL != '' || secrets.R2_ACCOUNT_ID != '') && 'true' || 'false' }}
        run: |
          echo "工作目录: $(pwd)"
          echo "根目录: $ROOT_DIR"
          echo "数据目录: $DATA_DIR"
          echo "配置文件路径: $CONFIG_PATH"
          echo "最大执行时间: $MAX_EXECUTION_TIME ms"
          echo "GitHub用户: $GITHUB_USER"
          echo "仓库名称: $REPO_NAME"
          
          # 使用新的入口脚本
          node dist/sync-subscriptions.js
      
      # 提交更改
      - name: Commit changes
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          
          # 检查是否有变更
          if [[ -n $(git status -s data/ output/) ]]; then
            # 添加所有变更
            git add data/ output/
            
            # 获取节点数量信息用于提交信息
            NODES_COUNT=$(grep -o '"totalNodes":[0-9]*' data/test_results/latest_test.json 2>/dev/null | grep -o '[0-9]*' || echo "未知")
            VALID_NODES=$(grep -o '"validNodes":[0-9]*' data/test_results/latest_test.json 2>/dev/null | grep -o '[0-9]*' || echo "未知")
            
            # 提交并推送变更
            git commit -m "更新订阅数据: ${VALID_NODES}/${NODES_COUNT} 个有效节点 - $(date +'%Y-%m-%d %H:%M:%S')"
            git push
            echo "已提交并推送更新"
          else
            echo "没有变更需要提交"
          fi